extend layout

block content
  section
    .row.w-100.m-0.vh-100-calc
      .col-lg-10.col-sm-12.pt-2.searchHolder.order-lg-3
        #searchTitle
          h4.display-4.text-center #{partyName}: 
            span#partyIdHolder
            script.
              $(document).ready(function() {
                var partyId = "#{partyId}";
                var text = "";
                for (var i = 0; i < partyId.length; i += 2) {
                  text += partyId.substr(i, 2) + " ";
                }
                $("#partyIdHolder").text(text);
              });
          .input-group.px-3.pb-3
            .input-group-prepend
              span.input-group-text#searchInputPrepend
                i.fas.fa-compact-disc#disc-prepend.active-prepend
                i.fas.fa-arrow-left#back-prepend.inactive-prepend
            input#searchInput.form-control(type="text", aria-describedby="searchInputPrepend", aria-label="Song", placeholder="Add some music...")
        #songResultHolder.songHolder.d-none
          .spinnerHolder
            i.fas.fa-spinner.fa-spin
        #queueSongHolder.songHolder
          .emptyQueueHolder
            | The queue is empty!<br><!-- If owner of party -->Go to your settings to add a playlist to fall back on!
      .w-100.d-block.d-lg-none.order-lg-2
      .col-lg-2.col-sm-12.py-2.sideBarHolder.order-lg-1
        | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean dapibus diam a purus hendrerit ultricies. Donec ac ante tincidunt, vestibulum lectus tempor, pulvinar nisl. Vivamus sed nulla sed elit laoreet placerat ac at ligula. Sed tempor vestibulum mauris vel molestie. Sed sed dolor sit amet massa tincidunt tempus. Nullam sit amet ante ante. Pellentesque suscipit est velit.
        | Aliquam eu odio eu lectus auctor laoreet. In maximus porta rutrum. Pellentesque tincidunt tincidunt fermentum.1
        | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean dapibus diam a purus hendrerit ultricies. Donec ac ante tincidunt, vestibulum lectus tempor, pulvinar nisl. Vivamus sed nulla sed elit laoreet placerat ac at ligula. Sed tempor vestibulum mauris vel molestie. Sed sed dolor sit amet massa tincidunt tempus. Nullam sit amet ante ante. Pellentesque suscipit est velit.
        | Aliquam eu odio eu lectus auctor laoreet. In maximus porta rutrum. Pellentesque tincidunt tincidunt fermentum.2
        | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean dapibus diam a purus hendrerit ultricies. Donec ac ante tincidunt, vestibulum lectus tempor, pulvinar nisl. Vivamus sed nulla sed elit laoreet placerat ac at ligula. Sed tempor vestibulum mauris vel molestie. Sed sed dolor sit amet massa tincidunt tempus. Nullam sit amet ante ante. Pellentesque suscipit est velit.
        | Aliquam eu odio eu lectus auctor laoreet. In maximus porta rutrum. Pellentesque tincidunt tincidunt fermentum.3
        .small-text
          | SPACER
    script.
      const queueMap = new Map();
      const songHTML = '<div class="row song container-fluid"><img class="col-2 px-0 img-fluid d-inline-block albumCover" src="https://i.scdn.co/image/ecd0fcd1e6202f2d1625e540cfd44acf1fac7f53"><div class="songInfo col-10 col-sm-9 col-lg-10 d-inline-block"><h5 class="songName">Now this is a very long song name of some long song that is in the spotify database</h5><div class="artistQueue"> <span class="artistName">Disturbed</span><span class="bar">&nbsp;| </span><span class="QueueStatus">Not in Queue</span></div></div><div class="col d-flex align-items-center justify-content-center justify-content-sm-end"><div class="btn btn-add-song"><span class="fas fa-plus"></span></div></div></div>';
      const queueHTML = '<div class="row song container-fluid"><img class="col-2 px-0 img-fluid d-inline-block albumCover" src="https://i.scdn.co/image/ecd0fcd1e6202f2d1625e540cfd44acf1fac7f53"><div class="songInfo col-10 col-sm-9 col-lg-10 d-inline-block"><h5 class="songName">Now this is a very long song name of some long song that is in the spotify database</h5><div class="artistQueue"> <span class="artistName">Disturbed</span><span class="bar">&nbsp;| </span><span class="QueueStatus">Not in Queue</span></div></div><div class="col d-flex align-items-center justify-content-center justify-content-sm-end"><div class="btn btn-add-song"><span class="fas fa-play rounded-circle"></span></div></div></div>';
      let accessToken = "#{accessToken}";
      $(document).ready(function() {
        const searchInput = $("#searchInput")[0];
        const songResultHolder = $("#songResultHolder")[0];
        const queueSongHolder = $("#queueSongHolder")[0];
        let autoSearchTimer = undefined;
        let searchVal = "";
        $(searchInput).on("input", function(event) {
          if (event.target.value.length > 0) {
            $("#disc-prepend").removeClass("active-prepend").addClass("inactive-prepend");
            $("#back-prepend").removeClass("inactive-prepend").addClass("active-prepend");
          } else {
            $("#disc-prepend").removeClass("inactive-prepend").addClass("active-prepend");
            $("#back-prepend").removeClass("active-prepend").addClass("inactive-prepend");
          }
          if (autoSearchTimer !== undefined) {
            clearTimeout(autoSearchTimer);
          }
          searchVal = event.target.value;
          autoSearchTimer = setTimeout(inputChanged, 750)
          if (searchVal === "") {
            // Switch back to queue view
            $(queueSongHolder).removeClass("d-none");
            $(songResultHolder).addClass("d-none");
            clearTimeout(autoSearchTimer);
            $(songResultHolder).find(".song").remove();
          } else {
            // Switch to search view
            $(songResultHolder).removeClass("d-none");
            $(queueSongHolder).addClass("d-none");
          }
        });
        function inputChanged() {
              console.log("Search for: \"" + searchVal + "\"");
              //TODO add proper market value for owning party
              // currently defaults to authenticated market of the authenticated user
              $.ajax({
                url: "https://api.spotify.com/v1/search",
                method: "GET",
                headers: {
                  Authorization: "Bearer " + accessToken
                },
                data: {
                  q: searchVal,
                  type: "track",
                  limit: 30
                }
              }).done(function(data) {
                console.log(data);
                $(songResultHolder).find(".song").remove();
                const tracks = data.tracks.items;
                tracks.forEach(function(track) {
                  const addedElement = $(songHTML);
                  $(addedElement).find(".songName").text(track.name);
                  let artistString = "";
                  track.artists.forEach(function (artist) {
                    artistString += artist.name + ", "
                  });
                  artistString = artistString.substr(0, artistString.length - 2);
                  $(addedElement).find(".artistName").text(artistString);
                  let image = {height: 9999999, width: 9999999, url: ""};
                  track.album.images.some(function (img){
                    if (img.height >= 64 && img.width >= 64) {
                      if (img.height < image.height || img.width < image.width) {
                        image = img;
                      }
                      if (image.height == 64 || image.width == 64) {
                        return true;
                      }
                    }
                  });
                  if (image === undefined) {
                    image = track.album.images[0];
                  }
                  $(addedElement).find(".albumCover").attr("src", image.url);
                  $(addedElement).find(".btn-add-song").attr("data-songUri", track.id)
                  $(songResultHolder).append(addedElement);
                });
                $(songResultHolder).wrap("<div></div>");
                $(songResultHolder).unwrap();
              }).fail(function(d) {
                const data = d.responseJSON;
                console.error(data);
                if (data.error.status == 401) {
                  console.log("Refreshing access token");
                  $.ajax({
                    url: "/auth/spotify/refreshAccessToken"
                  }).done(function(data) {
                    accessToken = data.accessToken;
                    inputChanged();
                  });
                } 
              });
            }
            function addSongToQueue(track, votes) {
              console.log("Adding to queue");
              const addedElement = $(queueHTML);
              $(addedElement).find(".songName").text(track.name);
              let artistString = "";
              track.artists.forEach(function (artist) {
                artistString += artist.name + ", "
              });
              artistString = artistString.substr(0, artistString.length - 2);
              $(addedElement).find(".artistName").text(artistString);
              let image = {height: 9999999, width: 9999999, url: ""};
              track.album.images.some(function (img){
                if (img.height >= 64 && img.width >= 64) {
                  if (img.height < image.height || img.width < image.width) {
                    image = img;
                  }
                  if (image.height == 64 || image.width == 64) {
                    return true;
                  }
                }
              });
              if (image === undefined) {
                image = track.album.images[0];
              }
              $(addedElement).find(".albumCover").attr("src", image.url);
              queueMap.set(track.id, {html: addedElement, votes: votes});
            }

            function getTrackFromUri(spotifyUri) {
              return new Promise(function (resolve, reject) {
                  $.ajax({
                    url: `https://api.spotify.com/v1/tracks/${spotifyUri}`,
                    method: "GET",
                    headers: {
                      Authorization: "Bearer " + accessToken
                    },
                    data: {
                      q: searchVal,
                      type: "track",
                      limit: 30
                    }
                  }).done(function(data) {
                    //- console.log(JSON.stringify(data));
                    resolve(data);
                  }).catch(function (err) {
                    console.error(err);
                  });
              });
            }

            function updateSongOrder() {
              console.log("Updating order");
              $(queueSongHolder).empty();
              try {
                const sortedQueue = new Map([...queueMap.entries()].sort((a, b) => b[1].votes - a[1].votes));
                sortedQueue.forEach((value, key) => {
                  $(queueSongHolder).append(value.html);
                });
              } catch (e) {
                console.error(e);
              }
            }

            function loadQueue(queue) {
              console.log(queue);
              let counter = queue.length;
              queue.forEach((item) => {
                getTrackFromUri(item.uri).then(function (data){
                  addSongToQueue(data, item.votes);
                  counter--;
                  if (counter == 0) {
                    updateSongOrder();
                  }
                }, function (err) {
                  console.error(err);
                });
              });
            }
          
            $(songResultHolder).on("click", ".btn-add-song", function() {
              ws.send(JSON.stringify({jsonrpc: 2.0, method: "addUriToQueue", params: {partyId: "#{partyId}", uri: $(this).attr("data-songuri")}}));
            });

            $("#back-prepend").on("click", function() {
              $(searchInput).val("").trigger("input");
            });

            var ws = new WebSocket("ws://192.168.1.13:3001");
            ws.onopen = function (event) {
              console.log("Connected");
              ws.send(JSON.stringify({jsonrpc: 2.0, method: "loadQueue", params: {partyId: "#{partyId}"}}));
            }

            ws.onmessage = function(event) {
              try {
                const msg = JSON.parse(event.data);
                if (msg.method == "addSongToQueue") {
                  getTrackFromUri(msg.params.uri).then(function (data) {
                    // TODO send the track (or id?) to server. Server pushes added track to listening clients
                    addSongToQueue(data, msg.params.votes);
                    console.log("Done");
                    updateSongOrder();
                  }, function (err) {
                    console.error(err);
                  });
                } else if (msg.method == "loadQueue") {
                  loadQueue(msg.params.queue);
                }
              } catch (e) {
                console.error(e);
              }
            }
          });